{
    parserClass = "org.intellij.fsharp.lang.parser.FSharpParser"
    parserUtilClass = "org.intellij.fsharp.lang.parser.FSharpParserUtil"

    implements = "org.intellij.fsharp.lang.parser.psi.FSharpCompositeElement"
    extends = "org.intellij.fsharp.lang.parser.psi.impl.FSharpCompositeElementImpl"

    elementTypeHolderClass = "org.intellij.fsharp.lang.parser.psi.FSharpTypes"
    elementTypePrefix = "FS_"
    elementTypeClass = "org.intellij.fsharp.lang.parser.psi.FSharpCompositeElementType"
    tokenTypeClass = "org.intellij.fsharp.lang.parser.psi.FSharpTokenType"

    psiClassPrefix = "FSharp"
    psiImplClassSuffix = "Impl"
    psiPackage = "org.intellij.fsharp.lang.parser.psi"
    psiImplPackage = "org.intellij.fsharp.lang.parser.psi.impl"
    psiImplUtilClass = "org.intellij.fsharp.lang.parser.psi.FSharpPsiImplUtil"

    generateTokenAccessors = true

    tokens = [
             letter = 'regexp:[A-Za-z]'
             space = 'regexp:\s+'
             comment = 'regexp://.*'
    ]

    extends(".*_pat") = pat
    extends(".*_parampat") = parampat
    extends(".*_expr") = expr
    extends(".*_compexpr") = compexpr
}

    root ::= expr //debugging purposes

    //A.2.1 Program Format
    implementation-file ::= (namespace-decl-group+ named-module)+ | named-module //| anon-module
    script-file ::= implementation-file
    signature-file ::=  (namespace-decl-group-sign+ named-module)+  | anon-module-sign | named-module-sign //todo
    named-module ::= module long-ident module-elems
    anon-module ::= module-elems
    named-module-sign ::= module long-ident module-sign-elems
    anon-module-sign ::= module-sign-elems
    script-fragment ::= module-elems

    //A.2.1.1 Namespaces and Modules
    namespace-decl-group ::= namespace long-ident module-elems | namespace global module-elems
    module-defn ::= attr? module access? ident "=" begin? module-defn-body end?
    module-defn-body ::= begin module-elems? end
    module-elem ::=
        | module-func-or-val-defn
        | type-defns
        | exception-defn
        | module-defn
        | module-abbrev
        | import-decl
        | compiler-directive-decl
    module-func-or-val-defn ::=
        | attr? let fun-defn
        | attr? let val-defn
        | attr? let rec? fun-or-val-defn
        | attr? do expr
    import-decl ::= open long-ident
    module-abbrev ::= module ident "=" long-ident
    compiler-directive-decl ::= "#" ident (string)+
    module-elems ::= (module-elem)+

    //A.2.1.2 namespaces and module system
    namespace-decl-group-sign ::= namespace  long-ident module-sign-elements
    module-sign ::= module ident "=" begin? module-sign-body end? //todo: check scenario when begin is missing and end is present
    module-sign-element ::=
        | val mutable? curried-sig
        | val val-defn
        | type type-sign
        | exception exception-sign
        | module-sign
        | module-abbrev
        | import-decl
    module-sign-elements ::= begin? (module-sign-element)+ end?
    module-sign-body ::= begin module-sign-elements end
    type-sign ::=
        | abrrev-type-sign
        | record-type-sign
        | union-type-sign
        | anon-type-sign
        | class-type-sign
        | struct-type-sign
        | inteface-type-sign
        | enum-type-sign
        | delegate-type-sign
        | type-ext-sign
    type-signs ::= type-sign and type-sign //todo: check that
    type-sign-elem ::=
        | attr? access? new ":" uncurried-sig
        | attr? member access? member-sig
        | attr? abstract access? member-sig
        | attr? override member-sig
        | attr? default member-sig
        | attr? static member access? member-sig
        | interface type
    abbrev-type-sign ::= type-name "=" type
    union-type-sign ::= type-name "=" union-type-cases type-ext-elems-sign?
    record-type-sign ::= type-name "=" "{" record-fields "}" type-ext-elems-sign?
    anon-type-sign ::= type-name "=" begin type-elems-sign end
    class-type-sign ::= type-name "=" class type-elems-sign end
    struct-type-sign ::= type-name "=" struct type-elems-sign end
    inteface-type-sign ::= type-name "=" interface type-elems-sign end
    enum-type-sign ::= type-name "=" enum-type-cases
    delegate-type-sign ::= type-name "=" delegate-sign
    type-ext-sign ::= type-name type-ext-elems-sign
    type-ext-elems-sign ::= with type-elems-sign end

    //A.2.2 types and type constraints
    type ::=
        | paren_type
        | func_type
        | tuple_type
        | variable_type
        | named_type
        | gen_type
        | open_type
        | explict_type //todo: what is the correct name for that
        | array_type
        | constr_type
        | subconstr_type
        | anon_type
    paren_type ::= "(" type ")"
    func_type ::= type "->" type
    tuple_type ::= (type "*")+ type //todo: check it
    variable_type ::= typar
    named_type ::= long-ident
    gen_type ::= long-ident "<" types ">"
    open_type ::= long-ident "< >"
    explict_type ::= type long-ident //todo: check that
    array_type ::= type "[" (",")* "]"
    constr_type ::= type type-defns
    subconstr_type ::= typar ":>" type
    anon_type ::= "#" type

    types ::= (type ",")* type //todo: should this is * or +?
    atom_type ::= anon_type | variable_type | paren_type | named_type | gen_type
    typar ::=
        | '_'           //anonymous variable type
        | "'" ident     //type variable
        | '^' ident     //static variable
    constraint ::=
        | typar ":>" type   //coersion constraint
        | typar ":" null    //nullness constraint
        | static-typars ":" "(" member-sig ")" //member "trait" constraint
        | typar ":" "(" new ":" unit "->" "'t" //cli default constructor constraint
        | typar ":" struct  //cli non-nullable struct
        | typar ":" not struct //cli reference type
        | typar ":" enum"<"type">" //enum decomposition type
        | typar ":" unmanaged //unmanaged constraint
        | typar ":" delegate"<" type "," type ">" //delegate decomposition constraint
        | typar ":" equality  //a.2.2.1 equality and comparison constraints
        | typar ":" comparison //a.2.2.1 equality and comparison constraints
    typar-defn ::= attr? typar
    typar-defns ::= "<" (typar-defn ",")* typar-defn typar-const? ">"
    typar-const ::= when (constraint and)* constraint //todo: verify that
    static-typars ::= | "^"ident | "(" ("^"ident or)* "^"ident ")"

    //A.2.3 expressions
    expr ::=
        | const_expr
        | paren_expr
        | block_expr
        | lookup_expr
        | dot-lookup_expr
        | appl_expr
        | high-prec_expr
        | type-appl_expr
        | infix-appl_expr
        | prefix-appl_expr
        | idx-lookup_expr
        | slice_expr
        | assgn_expr
        | tuple_expr
        | simpl-obj_expr
        | obj_expr
        | record_expr
        | record-clone_expr
        | list_expr
        | arr_expr
        | comptat_expr
        | comp-list_expr
        | comp-arr_expr
        | del_expr
        | null_expr
        | type-annot_expr
        | static-upcast-coer_expr
        | dyn-type_expr
        | dyn-downcast-coer_expr
        | static-upcast_expr
        | dyn-downcast_expr
        | fun-defn_expr
        | val-defn_expr
        | rec-defn_expr
        | det-disp_expr
        | func_expr
        | match-func_expr
        | seq-exce_expr
        | match_expr
        | try-with_expr
        | try-fin_expr
        | cond_expr
        | while-loop_expr
        | sim-loop_expr
        | enum_expr
        | assert_expr
        | quote_expr
        | dquote_expr
        | express_expr
        | weakly-typed_expr
        | static-mem-inv_expr
//        expr $app expr       // equivalent to "expr(expr)"
//        expr $sep expr       // equivalent to "expr; expr"
//        expr $tyapp < types > // equivalent to "expr<types>"

    const_expr ::= cons
    paren_expr ::= "("expr")"
    block_expr ::= begin expr end
    lookup_expr ::= long-ident-or-op
    dot-lookup_expr ::= expr "." long-ident-or-op
    appl_expr ::= expr expr
    high-prec_expr ::= expr"("expr")"
    type-appl_expr ::= expr"<"types">"
    infix-appl_expr ::= expr infix-op expr
    prefix-appl_expr ::= prefix-op expr
    idx-lookup_expr ::= expr".""["expr"]"
    slice_expr ::= expr".""[" slice-ranges "]"
    assgn_expr ::= expr "<-" expr
    tuple_expr ::= (expr ",")+ expr //todo ::= do we need brackets?
    simpl-obj_expr ::= new type expr
    obj_expr ::= "{" new base-call object-memebers interface-impls "}"
    record_expr ::= "{" field-inits "}"
    record-clone_expr ::= "{" expr with field-inits "}"
    list_expr ::= "[" (expr ",")* expr "]"
    arr_expr ::= "[|" (expr ",")* expr "|]"
    comptat_expr ::= expr "{" comp-or-range-expr "}"
    comp-list_expr ::= "[" comp-or-range-expr "]"
    comp-arr_expr ::= "[|" comp-or-range-expr "|]"
    del_expr ::= lazy expr
    null_expr ::= null
    type-annot_expr ::= expr ":" type
    static-upcast-coer_expr ::= expr ":>" type
    dyn-type_expr ::= expr ":?" type
    dyn-downcast-coer_expr ::= expr ":?>" type
    static-upcast_expr ::= upcast expr
    dyn-downcast_expr ::= downcast expr
    fun-defn_expr ::= let func-defn in? expr
    val-defn_expr ::= let val-defn in? expr
    rec-defn_expr ::= let rec fun-or-val-defn in? expr
    det-disp_expr ::= use ident "=" expr in? expr
    func_expr ::= fun args-pats "->" expr
    match-func_expr ::= function rules
    seq-exce_expr ::= expr ";" expr
    match_expr ::= match expr with rules
    try-with_expr ::= try expr with rules
    try-fin_expr ::= try expr finally expr
    cond_expr ::= if expr then expr elif-branches? else-branch?
    while-loop_expr ::= while expr do expr done
    sim-loop_expr ::= for ident "=" expr to expr do expr done
    enum_expr ::= for pat in expr-or-range-expr do expr done
    assert_expr ::= assert expr
    quote_expr ::= "<@" expr "@>"
    dquote_expr ::= "<@@" expr "@@>"
    express_expr ::= "%" expr
    weakly-typed_expr ::= "%%" expr
    static-mem-inv_expr ::= "(" static-typars ":" "(" member-sig ")" expr ")"

    exprs ::= (expr ",")* expr
    expr-or-range-expr ::= expr | range-expr
    elif-branches ::= elif-branch+
    elif-branch ::= elif expr then expr
    else-branch ::= else expr
    fun-or-val-defn ::= fun-defn | val-defn
    fun-defn ::= inline? access? ident-or-op typar-defns? args-pats ret-type? '=' expr
    val-defn ::= mutable? access? pat typar-defns? ret-type? "=" expr
    ret-type ::= type
    fun-or-val-defns ::= (fun-or-val-defn and)* fun-or-val-defn
    args-pats ::= atom_pat+
    field-init ::= long-ident "=" expr
    field-inits ::= (field-init ";")* field-init
    obj-constr ::= type expr | type
    base-call ::= obj-constr | obj-constrj as ident
    interface-impls ::= interface-impl+
    interface-impl ::= interface type object-memebers?
    object-memebers ::= with member-defns end
    member-defns ::= member-defn+

    //A.2.3.1 Computation and Range Expressions
    comp-or-range-expr ::=
        | compexpr
        | short-comp-expr
        | range-expr
    compexpr ::=
        | let-bang-bind_compexpr
        | let-bind_compexpr
        | do-bang_compexpr
        | do_compexpr
        | use-bang_compexpr
        | use_compexpr
        | yield-bang_compexpr
        | yield_compexpr
        | return-bang_compexpr
        | return_compexpr
        | if_compexpr
        | if-else_compexpr
        | match_compexpr
        | try-with_compexpr
        | try-fin_compexpr
        | while_compexpr
        | for_compexpr
        | for-in_compexpr
        | seq_compexpr
        | expr_compexpr
    let-bang-bind_compexpr ::= let"!" pat "=" expr in compexpr
    let-bind_compexpr ::= let pat "=" expr in compexpr
    do-bang_compexpr ::= do"!" pat "=" expr in compexpr
    do_compexpr ::= do pat "=" expr in compexpr
    use-bang_compexpr ::= use"!" pat "=" expr in compexpr
    use_compexpr ::= use pat "=" expr in compexpr
    yield-bang_compexpr ::= yield"!" expr
    yield_compexpr ::= yield expr
    return-bang_compexpr ::= return"!" expr
    return_compexpr ::= return expr
    if_compexpr ::= if expr then compexpr
    if-else_compexpr ::= if expr then expr else compexpr
    match_compexpr ::= match expr with pat "->" (compexpr "|")* pat "->" compexpr //todo: check that
    try-with_compexpr ::= try compexpr with pat "->" (compexpr "|")* pat "->" compexpr //todo: check that
    try-fin_compexpr ::= try compexpr finally expr
    while_compexpr ::= while expr do compexpr done
    for_compexpr ::= for ident "=" expr to expr do compexpr done
    for-in_compexpr ::= for pat in expr-or-range-expr do compexpr done
    seq_compexpr ::= compexpr ";" compexpr
    expr_compexpr ::= expr

    comp-rule ::= pat pattern-guard? "->" compexpr
    comp-rules ::= "|"? (comp-rule "|")* comp-rule
    short-comp-expr ::= for pat in expr-or-range-expr "->" expr
    range-expr ::= expr ".." expr (".." expr)?
    slice-ranges ::= (slice-range ",")* slice-range
    slice-range ::=
        | expr
        | expr ".."
        | ".."expr
        | expr".."expr
        | "*"

    //A.2.4 Patterns
    rule ::= pat pattern-guard? '->' expr
    pattern-guard ::= when expr
    pat ::=
        | const_pat        //constant pattern
        | named_pat         //named pattern
        | wildcard_pat      //wildcard pattern
        | as_pat            //"as" pattern
        | disj_pat          //disjunctive pattern
        | conj_pat          //conjunctive pattern
        | cons_pat          //"cons" pattern
        | constr_pat        //constrain pattern
        | tuple_pat         //tuple pattern
        | paren_pat         //parenthesized pattern
        | list_pat          //list pattern
        | array_pat         //array pattern
        | record_pat        //record pattern
        | atom_pat          //dynamic type test pattern
        | atomid_pat        //dynamic type test pattern
        | null_pat          //null-test pattern
        | attr_pat          //pattern with attrs
    const_pat ::= cons
    named_pat ::= long-ident parampat? pat?
    wildcard_pat ::= "_"
    as_pat ::= pat as ident
    disj_pat ::= pat "|" pat
    conj_pat ::= pat "&" pat
    cons_pat ::= pat "::" pat
    constr_pat ::= pat ":" type
    tuple_pat ::= ('(' pat',')+ pat')'
    paren_pat ::= '(' pat ')'
    list_pat ::= "[]" | ('[' (pat ';')* pat ']')
    array_pat ::= "[| |]" | ("[|" (pat ';')* pat "|]")
    record_pat ::= "{"( field_pat ';')* field_pat "}"
    atom_pat ::= ":?" atom-type_pat
    atomid_pat ::= ":?" atom-type_pat as ident
    null_pat ::= null
    attr_pat ::= todo
    atom-type_pat ::= const_pat | long-ident | list_pat | record_pat | array_pat | paren_pat | null_pat | wildcard_pat
    field_pat ::= long-ident '=' pat

    parampat ::= //pattern parameters
        | cons_parampat
        | named_parampat
        | brack_parampat
        | tuple_parampat
        | constr_parampat
        | quote_parampat
        | dquote_parampat
        | null_parampat
    cons_parampat ::= cons
    named_parampat ::= long-ident parampat?
    brack_parampat ::= "[" (parampat ";")* parampat "]"
    tuple_parampat ::= "(" (parampat "'")* parampat ")"
    constr_parampat ::= parampat ":" type
    quote_parampat ::= "<@" expr "@>"
    dquote_parampat ::= "<@@" expr "@@>"
    null_parampat ::= null

    pats ::= (pat ",")* pat
    field-pats ::= (field_pat ";")* field_pat
    rules ::= "|"? (rule "|")* rule

    //A.2.5 Type Definitions
    type-defn ::=
        | abbrev-type-defn
        | record-type-defn
        | union-type-defn
        | anon-type-defn
        | class-type-defn
        | struct-type-defn
        | interface-type-defn
        | enum-type-defn
        | delegate-type-defn
        | type-ext
    type-name ::= attr? access? ident typar-defns?
    abbrev-type-defn ::= type-name "=" type
    record-type-defn ::= type-name "=" union-type-cases type-ext-elems?
    union-type-cases ::= "|"? (union-type-case "|")* union-type-case
    union-type-case ::= attr? union-type-case-data
    union-type-case-data ::=
        | ident
        | ident of (union-type-field "*")* union-type-field
        | ident ":" uncurried-sig
    union-type-field ::= type | ident ":" type
    anon-type-defn ::= type-name primary-constr-args? obj-val? "=" begin class-type-body end
    record-type-defn ::= type-name "=" "{" record-fields "}" type-ext-elems?
    record-fields ::= (record-field ";")+ record-field
    record-field ::= attr? mutable? access? ident ":" type
    class-type-defn ::= type-name primary-constr-args? obj-val? "=" class class-type-body end
    as-defn ::= as ident
    class-type-body ::= begin? class-inhertis-decl? class-func-or-val-defns? type-defns-elems? end?
    class-inhertis-decl ::= inherit type expr?
    class-func-or-val-defns ::=
        | attr? static? let rec? func-or-val-defns
        | attr? static? do expr
    struct-type-defn::= type-name primary-constr-args? as-defn? "=" struct struct-type-body end
    struct-type-body ::= type-defn-elems
    interface-type-defn ::= type-name '=' interface interface-type-body end
    interface-type-body ::= type-defn-elements
    exception-defn ::=
        | attr? exception union-type-case-data
        | attr? exception ident '=' long-ident
    enum-type-defn ::= type-name '=' enum-type-cases
    enum-type-cases ::= '|'opt (enum-type-case '|')* enum-type-case
    enum-type-case ::= ident '=' const
    delegate-type-defn ::= type-name '=' delegate-sig
    delegate-sig ::= delegate of uncurried-sig
    type-extension ::= type-name type-extension-elements
    type-extension-elements ::= with type-defn-elements end
    type-defn-element ::=
        | member-defn
        | interface-impl
        | interface-signature
    type-defn-elements ::= (type-defn-element)+
    primary-constr-args ::= attr? access? "(" (simple-pat ",")* simple-pat")"
    simple-pat ::=
        | ident
        | simple-pat ::= type
    additional-constr-defn ::= attr? access? new pat as-defn "=" additional-constr-expr
    additional-constr-expr ::= //todo: remove left recursion
        | stmt ';' additional-constr-expr
        | additional-constr-expr then expr
        | if expr then additional-constr-expr else additional-constr-expr
        | let val-decls in  additional-constr-expr
        | additional-constr-init-expr
    additional-constr-init-expr ::=
        | '{' class-inherits-decl field-initializers '}'
        | new type expr
    member-defn ::=
        | attr? staticopt member access? method-or-prop-defn
        | attr? abstract memberopt access? member-sig
        | attr? override access? method-or-prop-defn
        | attr? default access? method-or-prop-defn
        | attr? staticopt val mutableopt access? ident ::= type
        | additional-constr-defn
    method-or-prop-defn ::=
        | ident? function-defn
        | ident? value-defn
        | ident? ident with function-or-value-defns
        | member ident "=" exp
        | member ident "=" exp with get
        | member ident "=" exp with set
        | member ident "=" exp with get","set
        | member ident "=" exp with set","get
    member-sig ::=
        | ident typar-defns? ":" curried-sig
        | ident typar-defns? ":" curried-sig with get
        | ident typar-defns? ":" curried-sig with set
        | ident typar-defns? ":" curried-sig with get "," set
        | ident typar-defns? ":" curried-sig with set "," get
    curried-sig ::= (args-spec "->")* args-spec "->" type
    uncurried-sig ::= args-spec "->" type
    args-spec ::= (arg-spec "*")* arg-spec
    arg-spec ::= attr? arg-name-specopt type
    arg-name-spec ::= "?"opt ident ":"
    interface-spec ::= interface type

    //A.2.6 Units of Measure
    measure-literal-atom ::=
        | long-ident
        | "(" measure-literal-simp ")"
    measure-literal-power ::=
        | measure-literal-atom
        | measure-literal-atom "^" int32
    measure-literal-seq ::= measure-literal-power* measure-literal-seq
    measure-literal-simp ::=
        | measure-literal-seq
        | measure-literal-simp "*" measure-literal-simp
        | measure-literal-simp '/'  measure-literal-simp
        | "/" measure-literal-simp
    measure-literal ::= "_" | measure-literal-simp
    const ::= //todo: include in the main const definition
        | sbyte "<" measure-literal ">"
        | int16 "<" measure-literal ">"
        | int32  "<" measure-literal ">"
        | int64  "<" measure-literal ">"
        | ieee32 "<" measure-literal ">"
        | ieee64 "<" measure-literal ">"
        | decimal "<" measure-literal ">"
    measure-atom ::=
        | typar
        | long-ident
        | "(" measure-simp ")"
    measure-power ::=
        | measure-atom
        | measure-atom "^" int32
    measure-seq ::= measure-power? measure-seq
    measure-simp ::=
        | measure-seq
        | measure-simp * measure-simp
        | measure-simp "/" measure-simp
        | "/" measure-simp
    measure ::= "_" | measure-simp

    //A.2.7	Custom Attributes and Reflection
    attr ::= attr-target ":"? object-construction
    attr-set ::= "[<" (attr ";")* attr ">]"
    attrs ::= attr-set+
    attr-target ::=
        | assembly
        | module
        | return
        | field
        | property
        | param
        | type
        | constructor
        | event

    //A.3.1	Conditional Compilation
    start-fsharp-token ::= "(*IF-FSHARP" | "(*F#"
    end-fsharp-token ::= "ENDIF-FSHARP*)" | "F#*)"
    start-ml-token ::= "(*IF-OCAML*)"
    end-ml-token ::= "(*ENDIF-OCAML*)"


